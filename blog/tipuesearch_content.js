var tipuesearch = {"pages":[{"title":"About","text":"2017Fall 機械設計工程系 CADP & CP 課程倉儲: https://mde1a1.kmol.info/2017fall 課程投影片: https://mde1a1.kmol.info/2017fall/doc/trunk/index.html 課程網誌: https://mde1a1.kmol.info/2017fall/doc/trunk/blog/","tags":"misc","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/pages/about/"},{"title":"計算機程式第九週期中心得","text":"操作影片 Untitled from 王君庭 on Vimeo . 學習心得 W1-W9心得 剛開始學fossil時,只聽到老師一直fossil clone跟fossil .....的完全不懂是什麼意思, 但經過老師錄製的教學影片及同學們的幫助,終於弄懂每個動作後面所指的涵義,只要將教學影片多看幾次就能了解老師所教的東西了 ,也學到了很有趣的迴圈用法,並將她用函式減少更改變數的次數,也學到一些calculator介面創建及排版,這幾堂課學習到了很多 自評分數:60","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w9.html"},{"title":"計算機程式第八週學習心得","text":"for 迴圈用法與 Python 的縮排規定及Eric6 操作影片 -機械設計工程系-計算機程式-40623201 from 王君庭 on Vimeo . 虎尾科技大學-機械設計工程系-計算機程式-40623201 from 王君庭 on Vimeo . 學習心得 本周學到了迴圈的語法及如何運用迴圈做出排列,從一開始簡單的迴圈的語法 for i in range(10): 變成了不用一一改變變數 只要先 def diamond(w): 假設變數為w 只要更改下面 diamond( )括號內的數字,就能改變變數,還有後面self的運用以及init初始就要先定義的運用 自評成績 自評分數:65","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w8.html"},{"title":"計算機程式第七週學習心得","text":"w7-exam 操作影片 -機械設計工程系-40623201 from 王君庭 on Vimeo . 學習心得 從第一週接觸計算機程式到現在發現到每個程式背後都有如此複雜的操作過程,一開始在看老師操作心中只有滿滿的問號,感覺整堂課只聽到fossil跟fossil clone,但經過幾次上課及同學們的幫助後,漸漸對老師上的東西有些概念了,不過這週的考試還是有些措手不及,有點茫然不知道要做什麼 自評成績 每週出席情況:100 紙本筆記:70 隨身碟內容:70 個人倉儲內容:65 各週上課摘要:65 自評分數:65","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w7-exam.html"},{"title":"計算機程式第六週學習心得","text":"課堂筆記 先mkdir github(建立一個 github) 再git clone https://github.com/kmolab/rpcal.git clone完後開啟eric6>Project>Open>clone的github資料夾>pyqt5_calculator>calculator.e4p 開啟後可以在Start>Run project...執行>按OK就能執行 再開另一個eric6>Project>New>填寫Project Name填寫名稱>Project Directory選擇存放位置>OK 學習心得 本周將之前學的如何建立倉儲,網誌和更改Auhor以及更改版本在重上一次,經過前幾次的操作後,這次能將之前不了解的部分多加理解,加深印象,本周也學到如何運用eric6去創建calculator的介面","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w6.html"},{"title":"計算機程式第五週(放假)","text":"W5 PyQt5 #!/usr/bin/env python import math from PyQt5.QtCore import Qt from PyQt5.QtWidgets import (QApplication, QGridLayout, QLayout, QLineEdit, QSizePolicy, QToolButton, QWidget) class Button(QToolButton): ''' def __init__(self, text, parent=None): super(Button, self).__init__(parent) ''' # for Python 3 def __init__(self, text): super().__init__() self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred) self.setText(text) def sizeHint(self): size = super(Button, self).sizeHint() size.setHeight(size.height() + 20) size.setWidth(max(size.width(), size.height())) return size class Calculator(QWidget): NumDigitButtons = 10 ''' def __init__(self, parent=None): super(Calculator, self).__init__(parent) ''' def __init__(self): super().__init__() self.pendingAdditiveOperator = '' self.pendingMultiplicativeOperator = '' self.sumInMemory = 0.0 self.sumSoFar = 0.0 self.factorSoFar = 0.0 self.waitingForOperand = True self.display = QLineEdit('0') self.display.setReadOnly(True) self.display.setAlignment(Qt.AlignRight) self.display.setMaxLength(15) font = self.display.font() font.setPointSize(font.pointSize() + 8) self.display.setFont(font) self.digitButtons = [] for i in range(Calculator.NumDigitButtons): self.digitButtons.append(self.createButton(str(i), self.digitClicked)) self.pointButton = self.createButton(\".\", self.pointClicked) self.changeSignButton = self.createButton(u\"\\N{PLUS-MINUS SIGN}\", self.changeSignClicked) self.backspaceButton = self.createButton(\"Backspace\", self.backspaceClicked) self.clearButton = self.createButton(\"Clear\", self.clear) self.clearAllButton = self.createButton(\"Clear All\", self.clearAll) self.clearMemoryButton = self.createButton(\"MC\", self.clearMemory) self.readMemoryButton = self.createButton(\"MR\", self.readMemory) self.setMemoryButton = self.createButton(\"MS\", self.setMemory) self.addToMemoryButton = self.createButton(\"M+\", self.addToMemory) self.divisionButton = self.createButton(u\"\\N{DIVISION SIGN}\", self.multiplicativeOperatorClicked) self.timesButton = self.createButton(u\"\\N{MULTIPLICATION SIGN}\", self.multiplicativeOperatorClicked) self.minusButton = self.createButton(\"-\", self.additiveOperatorClicked) self.plusButton = self.createButton(\"+\", self.additiveOperatorClicked) self.squareRootButton = self.createButton(\"Sqrt\", self.unaryOperatorClicked) self.powerButton = self.createButton(u\"x\\N{SUPERSCRIPT TWO}\", self.unaryOperatorClicked) self.reciprocalButton = self.createButton(\"1/x\", self.unaryOperatorClicked) self.equalButton = self.createButton(\"=\", self.equalClicked) mainLayout = QGridLayout() mainLayout.setSizeConstraint(QLayout.SetFixedSize) mainLayout.addWidget(self.display, 0, 0, 1, 6) mainLayout.addWidget(self.backspaceButton, 1, 0, 1, 2) mainLayout.addWidget(self.clearButton, 1, 2, 1, 2) mainLayout.addWidget(self.clearAllButton, 1, 4, 1, 2) mainLayout.addWidget(self.clearMemoryButton, 2, 0) mainLayout.addWidget(self.readMemoryButton, 3, 0) mainLayout.addWidget(self.setMemoryButton, 4, 0) mainLayout.addWidget(self.addToMemoryButton, 5, 0) for i in range(1, Calculator.NumDigitButtons): row = ((9 - i) / 3) + 2 column = ((i - 1) % 3) + 1 mainLayout.addWidget(self.digitButtons[i], row, column) mainLayout.addWidget(self.digitButtons[0], 5, 1) mainLayout.addWidget(self.pointButton, 5, 2) mainLayout.addWidget(self.changeSignButton, 5, 3) mainLayout.addWidget(self.divisionButton, 2, 4) mainLayout.addWidget(self.timesButton, 3, 4) mainLayout.addWidget(self.minusButton, 4, 4) mainLayout.addWidget(self.plusButton, 5, 4) mainLayout.addWidget(self.squareRootButton, 2, 5) mainLayout.addWidget(self.powerButton, 3, 5) mainLayout.addWidget(self.reciprocalButton, 4, 5) mainLayout.addWidget(self.equalButton, 5, 5) self.setLayout(mainLayout) self.setWindowTitle(\"Calculator\") def digitClicked(self): clickedButton = self.sender() digitValue = int(clickedButton.text()) if self.display.text() == '0' and digitValue == 0.0: return if self.waitingForOperand: self.display.clear() self.waitingForOperand = False self.display.setText(self.display.text() + str(digitValue)) def unaryOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if clickedOperator == \"Sqrt\": if operand < 0.0: self.abortOperation() return result = math.sqrt(operand) elif clickedOperator == u\"x\\N{SUPERSCRIPT TWO}\": result = math.pow(operand, 2.0) elif clickedOperator == \"1/x\": if operand == 0.0: self.abortOperation() return result = 1.0 / operand self.display.setText(str(result)) self.waitingForOperand = True def additiveOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return self.display.setText(str(self.factorSoFar)) operand = self.factorSoFar self.factorSoFar = 0.0 self.pendingMultiplicativeOperator = '' if self.pendingAdditiveOperator: if not self.calculate(operand, self.pendingAdditiveOperator): self.abortOperation() return self.display.setText(str(self.sumSoFar)) else: self.sumSoFar = operand self.pendingAdditiveOperator = clickedOperator self.waitingForOperand = True def multiplicativeOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return self.display.setText(str(self.factorSoFar)) else: self.factorSoFar = operand self.pendingMultiplicativeOperator = clickedOperator self.waitingForOperand = True def equalClicked(self): operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return operand = self.factorSoFar self.factorSoFar = 0.0 self.pendingMultiplicativeOperator = '' if self.pendingAdditiveOperator: if not self.calculate(operand, self.pendingAdditiveOperator): self.abortOperation() return self.pendingAdditiveOperator = '' else: self.sumSoFar = operand self.display.setText(str(self.sumSoFar)) self.sumSoFar = 0.0 self.waitingForOperand = True def pointClicked(self): if self.waitingForOperand: self.display.setText('0') if \".\" not in self.display.text(): self.display.setText(self.display.text() + \".\") self.waitingForOperand = False def changeSignClicked(self): text = self.display.text() value = float(text) if value > 0.0: text = \"-\" + text elif value < 0.0: text = text[1:] self.display.setText(text) def backspaceClicked(self): if self.waitingForOperand: return text = self.display.text()[:-1] if not text: text = '0' self.waitingForOperand = True self.display.setText(text) def clear(self): if self.waitingForOperand: return self.display.setText('0') self.waitingForOperand = True def clearAll(self): self.sumSoFar = 0.0 self.factorSoFar = 0.0 self.pendingAdditiveOperator = '' self.pendingMultiplicativeOperator = '' self.display.setText('0') self.waitingForOperand = True def clearMemory(self): self.sumInMemory = 0.0 def readMemory(self): self.display.setText(str(self.sumInMemory)) self.waitingForOperand = True def setMemory(self): self.equalClicked() self.sumInMemory = float(self.display.text()) def addToMemory(self): self.equalClicked() self.sumInMemory += float(self.display.text()) def createButton(self, text, member): button = Button(text) button.clicked.connect(member) return button def abortOperation(self): self.clearAll() self.display.setText(\"####\") def calculate(self, rightOperand, pendingOperator): if pendingOperator == \"+\": self.sumSoFar += rightOperand elif pendingOperator == \"-\": self.sumSoFar -= rightOperand elif pendingOperator == u\"\\N{MULTIPLICATION SIGN}\": self.factorSoFar *= rightOperand elif pendingOperator == u\"\\N{DIVISION SIGN}\": if rightOperand == 0.0: return False self.factorSoFar /= rightOperand return True if __name__ == '__main__': import sys app = QApplication(sys.argv) calc = Calculator() calc.show() sys.exit(app.exec_())","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/2017-fall-cp-w5.html"},{"title":"網際 Brython 3.3.4 程式執行環境","text":"Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題. window.onload=function(){ brython({debug:1, pythonpath:['./../data/py']}); } 利用以下的編輯器執行 Python3 程式 在 Firefox 中, 以 Preferences - General - Downloads 選擇 \"Always ask me where to save files\" 在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading function doSave(){ var blob = new Blob([localStorage[\"py_src\"]], {type: \"text/plain;charset=utf-8\"}); filename = document.getElementById('filename').value saveAs(blob, filename+\".py\"); } import sys import time import traceback import javascript from browser import document as doc, window, alert has_ace = True try: editor = window.ace.edit(\"editor\") session = editor.getSession() session.setMode(\"ace/mode/python\") editor.setOptions({ 'enableLiveAutocompletion': True, 'enableSnippets': True, 'highlightActiveLine': False, 'highlightSelectedWord': True }) except: from browser import html editor = html.TEXTAREA(rows=20, cols=70) doc[\"editor\"] <= editor def get_value(): return editor.value def set_value(x):editor.value = x editor.getValue = get_value editor.setValue = set_value has_ace = False if hasattr(window, 'localStorage'): from browser.local_storage import storage else: storage = None def reset_src(): if storage is not None and \"py_src\" in storage: editor.setValue(storage[\"py_src\"]) else: editor.setValue('for i in range(10):\\n\\tprint(i)') editor.scrollToRow(0) editor.gotoLine(0) def reset_src_area(): if storage and \"py_src\" in storage: editor.value = storage[\"py_src\"] else: editor.value = 'for i in range(10):\\n\\tprint(i)' class cOutput: def __init__(self,target): self.target = doc[target] def write(self,data): self.target.value += str(data) #if \"console\" in doc: sys.stdout = cOutput(\"console\") sys.stderr = cOutput(\"console\") def to_str(xx): return str(xx) info = sys.implementation.version doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro) output = '' def show_console(ev): doc[\"console\"].value = output doc[\"console\"].cols = 60 doc[\"console\"].rows = 10 # load a Python script def load_script(evt): _name = evt.target.value + '?foo=%s' % time.time() editor.setValue(open(_name).read()) # run a script, in global namespace if in_globals is True def run(*args): global output doc[\"console\"].value = '' src = editor.getValue() if storage is not None: storage[\"py_src\"] = src t0 = time.perf_counter() try: #ns = {'__name__':'__main__'} ns = {'__name__':'editor'} exec(src, ns) state = 1 except Exception as exc: traceback.print_exc(file=sys.stderr) state = 0 output = doc[\"console\"].value print('<completed in %6.2f ms>' % ((time.perf_counter() - t0) * 1000.0)) return state if has_ace: reset_src() else: reset_src_area() def clear_console(ev): doc[\"console\"].value = \"\" def clear_container(ev): doc[\"container\"].clear() doc['run'].bind('click',run) doc['show_console'].bind('click',show_console) doc['clear_console'].bind('click',clear_console) doc['clear_container'].bind('click',clear_container) Filename: .py Run Output 清除 清除畫布 from browser import document as doc import script1 def ex1(ev): script1.editor.setValue('''#ex1 簡單的 for 迴圈範例 for i in range(10): print(i) ''') script1.editor.scrollToRow(0) script1.editor.gotoLine(0) doc['ex1'].bind('click',ex1) ex1 -for 迴圈 from browser import document as doc import script1 def ex2(ev): script1.editor.setValue('''#溫度轉換程式 from browser import document as doc # 因為此函式與滑鼠互動, 需要 event 當作輸入 def convTemp(): mystring = \"\" cdegree = input(\"請輸入攝氏溫度:\") fdegree = float(cdegree)*9/5 + 32 output_string = \"攝氏 \" + str(cdegree) + \"度=華氏 \" + str(fdegree) + \"度\" # 利用 print() 將轉換結果送到 console 區 print(output_string) #直接呼叫 convTemp() 執行 convTemp() ''') script1.editor.scrollToRow(0) script1.editor.gotoLine(0) doc['ex2'].bind('click',ex2) ex2 -溫度換算 from browser import document as doc import script1 def ex3(ev): script1.editor.setValue('''#jansen 多連桿機構驗算 from math import pi, cos, sin, sqrt, acos radian = 180/pi degree = pi/180 #PLAP def plap(ax, ay, ac, bac, bx, by, ccw): if ccw == 1: cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay else: cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay return cx, cy #PLLP def pllp(ax, ay, ac, cb, bx, by, cw): if cw == 1: cx = -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)) cy = (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)) else: cx = -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)) cy = (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)) return cx, cy ax = -38 ay = 0 # b 為原點 bx = 0 by = 0 cx = 0 cy = 7.8 # m 為配合 PLAP 新增固定點 mx = 30 my = 7.8 # dcm ccw 方向角度 dcm = 30*degree cd = 15 # 三角形 dcm 為 ccw plap d=(a, cd, dcm, m) dx, dy = plap(cx, cy, cd, dcm, mx, my, ccw=1) print(\"dx=\", dx, \"dy=\", dy) # 三角形 aed 為 cw pllp e=(a, ae, ed, d) ae = 41.5 ed = 50 ex, ey = pllp(ax, ay, ae, ed, dx, dy, cw=1) print(\"ex=\", ex, \"ey=\", ey) # 三角形 afe 為 cw pllp f=(a, af, fe, e) af = 40.1 fe = 55.8 fx, fy = pllp(ax, ay, af, fe, ex, ey, cw=1) print(\"fx=\", fx, \"fy=\", fy) # 三角形 dha 為 cw pllp h=(d, dh, ha, a) dh = 61.9 ha = 39.3 hx, hy = pllp(dx, dy, dh, ha, ax, ay, cw=1) print(\"hx=\", hx, \"hy=\", hy) # 三角形 hgf 為 cw pllp g=(h, hg, gf, f) hg = 36.7 gf = 39.4 gx, gy = pllp(hx, hy, hg, gf, fx, fy, cw=1) print(\"gx=\", gx, \"gy=\", gy) # 三角形 hkg 為 cw pllp k=(h, hk, kg, g) hk = 49 kg = 65.7 kx, ky = pllp(hx, hy, hk, kg, gx, gy, cw=1) print(\"kx=\", kx, \"ky=\", ky) ''') script1.editor.scrollToRow(0) script1.editor.gotoLine(0) doc['ex3'].bind('click',ex3) ex3 -多連桿機構 from browser import document as doc import script1 def ex4(ev): script1.editor.setValue('''#ex4 turtle 網際繪圖 import turtle t=turtle.Turtle() t.penup() t.left(45) t.backward(125) t.right(45) t.pendown() for c in ['red', 'green', 'yellow', 'blue']: t.color(c) t.forward(75) t.left(90) t1=turtle.Turtle(\"turtle\") t1.penup() t1.pendown() t1.width(3) for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']: t1.color(c) t1.forward(50) t1.left(60) t1.penup() t1.left(60) t1.backward(120) t1.pendown() t1.color('red') t1.write(\"I love Brython!!\") turtle._Screen().end() ''') script1.editor.scrollToRow(0) script1.editor.gotoLine(0) doc['ex4'].bind('click',ex4) ex4 -turtle 網際繪圖 from browser import document import script1 def get_file(e): data = open(\"./../python_ex/for1.py\").read() script1.editor.setValue(data) script1.editor.scrollToRow(0) script1.editor.gotoLine(0) document[\"get\"].bind(\"click\", get_file) from browser import document import script1 def get_temp1(e): data = open(\"./../python_ex/temp1.py\").read() script1.editor.setValue(data) script1.editor.scrollToRow(0) script1.editor.gotoLine(0) document[\"get_temp1\"].bind(\"click\", get_temp1) from browser import document import script1 def get_ver_and_kw(e): data = open(\"./../python_ex/ver_and_kw.py\").read() script1.editor.setValue(data) script1.editor.scrollToRow(0) script1.editor.gotoLine(0) document[\"get_ver_and_kw\"].bind(\"click\", get_ver_and_kw) from browser import document import script1 def jansen(e): data = open(\"./../python_ex/jansen.py\").read() script1.editor.setValue(data) script1.editor.scrollToRow(0) script1.editor.gotoLine(0) document[\"jansen\"].bind(\"click\", jansen) from browser import document import script1 def tutorial(e): # 利用 e.target.text 取的對應按鈕的字串, 可以開啟對應的程式檔案 data = open(\"./../python_ex/python3_\"+e.target.text+\".py\").read() script1.editor.setValue(data) script1.editor.scrollToRow(0) script1.editor.gotoLine(0) document[\"tutorial1\"].bind(\"click\", tutorial) document[\"tutorial2\"].bind(\"click\", tutorial) document[\"tutorial3\"].bind(\"click\", tutorial) document[\"tutorial4\"].bind(\"click\", tutorial) document[\"tutorial5\"].bind(\"click\", tutorial) document[\"tutorial6\"].bind(\"click\", tutorial) document[\"tutorial7\"].bind(\"click\", tutorial) for1.py temp1.py ver_and_kw.py jansen.py tutorial1 tutorial2 tutorial3 tutorial4 tutorial5 tutorial6 tutorial7 Jansen 多連桿機構尺寸圖:","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/4062-brython-editor-334.html"},{"title":"計算機程式第四週學習心得","text":"課堂筆記 fossil clone 克隆 fossil open 開啟 fossil add 新增 fossil commit 提交 fossil push 推送 fossil status 狀態 fossil delete 刪除 利用Leo.Editor 維護網誌 利用Leo.Editor 維護投影片 Part 1 重複上週clone 4062的動作 fossil open ./../../ 需用相對目錄去綁帳號,不能用絕對目錄去綁死,一旦綁死之後若前面的資料夾有重複就必須更改很多東西 再開啟launchLeo.py再開啟4062>users>yen.leo 更改Auhor:yen改為Auhor:40623201 不能用全形字,如果發生問題要檢查文字是否有全形字在內 再重複上週推近端及遠端之動作 遠端是有討論版的,而近端沒有 先fossil add . 之後fossil status時,會發現剛剛更改的yen會被MISSING 接著fossil delete 剛剛yen被MISSING的那行 再fossil commit -m \" \"提交上去後就能推遠端了 Part 2 .pyc的格式是二位元,因為Python 3是解譯的必須在執行時一行一行轉譯執行的程式,再推程式時必須忽略它(需手動的方式刪除) 先mkdir fossil-settings 新建一個 fossil-settings(不能直接在資料夾新增,因為不是一般的資料夾格式,就必須用程式mkdir的方式去建立) 再將ignore-glob的檔案 複製 /.git/ , / pycache / , / .pyc(意思是凡是在__pycache__的資料夾內以及.pyc檔和.git都不要) 之後下fossil delete pycache /* 刪除掉__pycache__的資料夾 再fossil add .>fossil commit -m \" \"提交上去就能版本同步了 學習心得 本周學習到如何維護網誌及更改版本讓版本同步,有許多部分(例如:全形字,手動刪除 等)需要特別注意不然就會容易發生錯誤","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w.html"},{"title":"計算機程式第三週學習心得","text":"課堂筆記 Part 1 先fossil clone https://4062@cpb.kmol.info/4062 4062.fossil 然後fossil open(/../../ 兩個小點代表回上一層資料夾) 再複製上周clone的4052(_pycache_跟_FOSSIL_不能複製到不然版次會亂掉) 接著fossil add .新增在版次系統內 再fossil commit -m \" \"(提交要綁定訊息,\" \"內所打的東西會再Timeline上看到) 之後再輸入密碼就能將東西推上遠端 Part 2 近端能在沒有網路的情況下觀看,運用fossil ui 4062.fossil能觀看近端 如何更改近端及遠端: 先打開launchLeo.py再開啟4062>users>yen.leo 開啟後接著在@button pelican-blog按下pelican-blog(近端按鈕)>Goto Script 近端完成後接著在遠端的@edit publishconf.py更改網址(需更改主機及學號)後 File>Save(儲存)後再按github-biog(遠端按鈕)>Goto Script 再推送上去(重複上面新增版次級提交的動作) 學習心得 本周學習到如何clone別人的倉儲來新增並推送上去自己的倉儲,也了解到近端及遠端的差異性","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w3.html"},{"title":"計算機程式第二週學習心得","text":"課堂筆記 sofware 軟體 configuration 組成內容與狀態 SCM - Software Configuration Management 軟體配置管理:又稱軟體組態管理,對軟體的每個項目變更時進行管控,維護不同項目之間的版本關聯,使軟體在開發過程中任一時間的內容都可以被追溯 batch 批次 remark 註解 default 內定, 默認 fossil clone 克隆 fossil add 新增 fossil commit 提交 fossil commit - m \"訊息 \" fossil status 狀態 fossil push 推送 fossil open 開啟 fossil remote-url off 網址關閉 fossil ui - user interface 使用者介面 remote 遠端 URL - Uniform Resource Locator 統一資源定位器:俗稱網頁位址(網址) HTTPS - Hypertext Transfer Protocol Secure 安全超文本傳輸協議:是一種透過計算機網路進行安全通訊的傳輸協議 protocol 協定 certification 簽章 - public key server certify 認證 vacuum 吸塵(把不要的東西清除) fossil clone https://mde1a1.kmol.info/pymcadp pymcadp.fossil IDE - Integrated Development Environment 整合開發環境:是一種輔助程式開發人員開發軟體的應用軟體,在開發工具內部可以輔助編寫原始碼並編譯打包成為可用的程式 登入帳號: mde.tw>2017fall>cp倉儲一乙>40623201>login 修改密碼: Admin>user>40623201>修改密碼passward>Apply changes 更改時間軸(Timeline): Admin>Timeline>Use Universal Coordinated Time>把打勾取消 建立Wiki: Wiki>New>Name of new wiki page:輸入名稱>Create 學習心得: 這周開始接觸到許多fossil的指令,有許多東西是之前沒看過的,也對建立倉儲有初步的概念了","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/2017-fall-cp-w2.html"},{"title":"計算機程式第一週學習心得","text":"課堂筆記 機械設計:表達內容由固體,液體,軟體組成 六種表達: (1)口語 (2)文字 (3)圖表(2D)-不會動 (4)3D-會動 (5)量化 (6)實體 創造力: (1)自學力(好好學) (2)執行力(好好做) (3)想像力(達不到的運用想像力) 程式: 程-流程 式-一定的格式 Ctrl+A 全選 Ctrl+C 複製 Ctrl+E 放大 Ctrl+V 貼上 interpret 解譯:是一種能將高階程式語言一行一行直接轉譯執行的程式 compiler 編譯:是一種將某種程式語言寫成的原始碼轉換成另一種程式語言的程式 (執行程式速度:編譯>解譯) 學習心得 重新認識機械設計的定義以及學習到了六種設計者的表達方式,也了解到創造力對設計者來說不能只是空想,必須要有自學力去學習及執行力去做出來,更要有想像力去想像無法運用身邊資源所做出來的東西,必須具備這些條件才能出創造東西","tags":"Course","url":"https://cpb.kmol.info/40623201/doc/trunk/blog/40623201-w1.html"}]};